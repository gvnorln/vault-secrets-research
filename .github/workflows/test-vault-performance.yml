name: Vault Dynamic Secrets Performance Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_iterations:
        description: 'Number of test iterations'
        required: false
        default: '10'
        type: string

env:
  MINIKUBE_VERSION: v1.32.0
  KUBECTL_VERSION: v1.28.0
  HELM_VERSION: v3.13.0

jobs:
  # CONSOLIDATE EVERYTHING INTO ONE JOB - Minikube state tidak bisa di-share antar job
  performance-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Tools
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

        # Install Minikube
        curl -LO https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        rm minikube-linux-amd64

        # Install Vault CLI
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install vault jq bc

    - name: Start Minikube and Deploy Infrastructure
      run: |
        # Start Minikube
        minikube start --driver=docker --memory=4096 --cpus=2
        minikube addons enable ingress
        kubectl cluster-info

        # Deploy PostgreSQL
        kubectl create namespace database
        kubectl apply -f k8s/postgres/
        echo "Waiting for PostgreSQL..."
        kubectl wait --for=condition=ready pod -l app=postgres -n database --timeout=300s

        # Deploy Vault (tanpa wait for ready dulu)
        kubectl create namespace vault
        kubectl apply -f k8s/vault/
        echo "Waiting for Vault pod to be running (not ready yet)..."
        kubectl wait --for=condition=PodScheduled pod -l app=vault -n vault --timeout=300s
        
        # Wait for Vault container to be running (meskipun belum ready)
        timeout 300 bash -c 'until kubectl get pod -l app=vault -n vault -o jsonpath="{.items[0].status.phase}" | grep -q Running; do sleep 5; done'

    - name: Initialize and Configure Vault
      run: |
        # Port forward Vault (masih uninitialized, tapi sudah running)
        kubectl port-forward svc/vault-service 8200:8200 -n vault &
        PF_PID=$!
        sleep 15
        
        export VAULT_ADDR="http://localhost:8200"
        
        # Check Vault status (akan return error karena uninitialized, tapi itu normal)
        echo "Checking Vault status before initialization:"
        vault status || echo "Expected: Vault is not initialized"
        
        # Initialize Vault
        echo "Initializing Vault..."
        vault operator init -key-shares=5 -key-threshold=3 > vault-init-keys.txt
        cat vault-init-keys.txt
        
        # Extract keys - more robust extraction
        UNSEAL_KEY_1=$(grep 'Unseal Key 1:' vault-init-keys.txt | awk '{print $NF}')
        UNSEAL_KEY_2=$(grep 'Unseal Key 2:' vault-init-keys.txt | awk '{print $NF}')
        UNSEAL_KEY_3=$(grep 'Unseal Key 3:' vault-init-keys.txt | awk '{print $NF}')
        ROOT_TOKEN=$(grep 'Initial Root Token:' vault-init-keys.txt | awk '{print $NF}')
        
        echo "Extracted credentials:"
        echo "UNSEAL_KEY_1: $UNSEAL_KEY_1"
        echo "UNSEAL_KEY_2: $UNSEAL_KEY_2" 
        echo "UNSEAL_KEY_3: $UNSEAL_KEY_3"
        echo "ROOT_TOKEN: $ROOT_TOKEN"
        
        echo "Unsealing Vault..."
        vault operator unseal $UNSEAL_KEY_1
        vault operator unseal $UNSEAL_KEY_2
        vault operator unseal $UNSEAL_KEY_3
        
        # Now Vault should be ready
        vault status
        
        # Authenticate using the correct command
        echo "Authenticating with Vault..."
        export VAULT_TOKEN=$ROOT_TOKEN
        vault auth -method=token
        
        # Verify authentication
        vault token lookup
        
        # Configure database secrets engine
        echo "Configuring database secrets engine..."
        vault secrets enable database
        
        # Wait a moment for the secrets engine to be ready
        sleep 5
        
        # Configure database connection
        echo "Configuring database connection..."
        vault write database/config/postgres \
            plugin_name=postgresql-database-plugin \
            connection_url="postgresql://{{username}}:{{password}}@postgres-service.database.svc.cluster.local:5432/testdb?sslmode=disable" \
            allowed_roles="readonly,readwrite" \
            username="postgres" \
            password="initialpassword123"
        
        # Verify database connection
        echo "Testing database connection..."
        vault read database/config/postgres
        
        # Create database roles
        echo "Creating readonly role..."
        vault write database/roles/readonly \
            db_name=postgres \
            creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"{{name}}\";" \
            default_ttl="1h" \
            max_ttl="24h"
        
        echo "Creating readwrite role..."
        vault write database/roles/readwrite \
            db_name=postgres \
            creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \"{{name}}\";" \
            default_ttl="1h" \
            max_ttl="24h"
        
        # Test dynamic credential generation
        echo "Testing dynamic credentials..."
        vault read database/creds/readonly
        vault read database/creds/readwrite
        
        # Save credentials for later use
        echo "ROOT_TOKEN=$ROOT_TOKEN" >> $GITHUB_ENV
        echo "UNSEAL_KEY_1=$UNSEAL_KEY_1" >> $GITHUB_ENV
        echo "UNSEAL_KEY_2=$UNSEAL_KEY_2" >> $GITHUB_ENV
        echo "UNSEAL_KEY_3=$UNSEAL_KEY_3" >> $GITHUB_ENV
        
        kill $PF_PID

    - name: Verify Vault is Ready
      run: |
        # Now Vault should pass health checks
        echo "Verifying Vault readiness..."
        kubectl get pods -n vault
        kubectl describe pod -l app=vault -n vault
        
        # Check if Vault is actually ready now
        kubectl wait --for=condition=ready pod -l app=vault -n vault --timeout=60s || echo "Vault pod may not be fully ready, but should be functional"
        echo "Vault verification complete!"

    - name: Build and Deploy Applications
      run: |
        # Set docker environment for minikube
        eval $(minikube docker-env)
        
        # Build static secrets app
        echo "Building static secrets app..."
        cd test-apps/static-secrets-app
        docker build -t static-secrets-app:v1.0 .
        
        # Build vault secrets app
        echo "Building vault secrets app..."
        cd ../vault-secrets-app
        docker build -t vault-secrets-app:v1.0 .
        cd ../..
        
        # Deploy static secrets app
        kubectl apply -f k8s/app/static-secrets-deployment.yaml
        
        # Deploy vault secrets app with token
        sed "s/REPLACE_WITH_ROOT_TOKEN/$ROOT_TOKEN/g" k8s/app/vault-secrets-deployment.yaml | kubectl apply -f -
        
        # Wait for deployments
        kubectl wait --for=condition=available deployment/static-secrets-app --timeout=300s
        kubectl wait --for=condition=available deployment/vault-secrets-app --timeout=300s
        
        kubectl get pods

    - name: Run Performance Tests
      run: |
        # Create comprehensive performance test
        cat > performance_test.sh << 'SCRIPT'
        #!/bin/bash
        
        ITERATIONS=${1:-10}
        
        echo "=== Vault Dynamic Secrets Performance Test ==="
        echo "Iterations: $ITERATIONS"
        
        # Port forward applications
        kubectl port-forward svc/static-secrets-service 8080:5000 &
        STATIC_PID=$!
        kubectl port-forward svc/vault-secrets-service 8081:5000 &
        VAULT_PID=$!
        
        sleep 15
        
        # Test scenarios
        declare -A scenarios=(
            ["light_load"]="1 1.0"
            ["medium_load"]="5 0.5" 
            ["heavy_load"]="10 0.1"
        )
        
        # Overall results
        echo '{"test_date":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","scenarios":{}}' > performance_report.json
        
        for scenario in "${!scenarios[@]}"; do
            echo "=== Testing $scenario ==="
            
            IFS=' ' read -r concurrent_requests request_delay <<< "${scenarios[$scenario]}"
            
            # Results for this scenario
            scenario_results='{"concurrent_requests":'$concurrent_requests',"request_delay":'$request_delay',"results":[]}'
            
            for i in $(seq 1 $ITERATIONS); do
                echo "Iteration $i/$ITERATIONS for $scenario..."
                
                # Test static app
                STATIC_START=$(date +%s.%N)
                STATIC_RESPONSE=$(timeout 30 curl -s http://localhost:8080/users || echo '{"error":"timeout"}')
                STATIC_END=$(date +%s.%N)
                STATIC_TIME=$(echo "$STATIC_END - $STATIC_START" | bc -l)
                
                # Test vault app  
                VAULT_START=$(date +%s.%N)
                VAULT_RESPONSE=$(timeout 30 curl -s http://localhost:8081/users || echo '{"error":"timeout"}')
                VAULT_END=$(date +%s.%N)
                VAULT_TIME=$(echo "$VAULT_END - $VAULT_START" | bc -l)
                
                # Parse responses safely
                STATIC_SUCCESS=$(echo "$STATIC_RESPONSE" | jq -r 'if type == "object" and has("error") then "false" else "true" end' 2>/dev/null || echo "false")
                VAULT_SUCCESS=$(echo "$VAULT_RESPONSE" | jq -r 'if type == "object" and has("error") then "false" else "true" end' 2>/dev/null || echo "false")
                
                # Build result entry
                RESULT_ENTRY=$(jq -n \
                    --arg iter "$i" \
                    --arg static_time "$STATIC_TIME" \
                    --arg static_success "$STATIC_SUCCESS" \
                    --arg vault_time "$VAULT_TIME" \
                    --arg vault_success "$VAULT_SUCCESS" \
                    '{
                        iteration: ($iter | tonumber),
                        static_app: {
                            response_time: ($static_time | tonumber),
                            success: ($static_success == "true")
                        },
                        vault_app: {
                            response_time: ($vault_time | tonumber), 
                            success: ($vault_success == "true")
                        }
                    }')
                
                scenario_results=$(echo "$scenario_results" | jq ".results += [$RESULT_ENTRY]")
                
                sleep $request_delay
            done
            
            # Add scenario results to main report
            jq --arg scenario "$scenario" --argjson data "$scenario_results" '.scenarios[$scenario] = $data' performance_report.json > tmp.json && mv tmp.json performance_report.json
            
            # Calculate and show summary for this scenario
            STATIC_AVG=$(echo "$scenario_results" | jq -r '.results | map(select(.static_app.success) | .static_app.response_time) | add / length')
            VAULT_AVG=$(echo "$scenario_results" | jq -r '.results | map(select(.vault_app.success) | .vault_app.response_time) | add / length')
            
            if [[ "$STATIC_AVG" != "null" && "$VAULT_AVG" != "null" ]]; then
                OVERHEAD=$(echo "$VAULT_AVG - $STATIC_AVG" | bc -l)
                OVERHEAD_PERCENT=$(echo "scale=2; ($OVERHEAD / $STATIC_AVG) * 100" | bc -l)
                echo "$scenario Results:"
                echo "  Static App Average: ${STATIC_AVG}s"
                echo "  Vault App Average: ${VAULT_AVG}s"
                echo "  Overhead: ${OVERHEAD}s (${OVERHEAD_PERCENT}%)"
            fi
        done
        
        echo "=== Complete Performance Report ==="
        cat performance_report.json | jq .
        
        # Cleanup
        kill $STATIC_PID $VAULT_PID 2>/dev/null || true
        SCRIPT
        
        chmod +x performance_test.sh
        ./performance_test.sh ${{ github.event.inputs.test_iterations || '10' }}

    - name: Generate Summary Report
      run: |
        # Create markdown summary
        python3 << 'PYTHON'
        import json
        import statistics
        
        # Load results
        with open('performance_report.json', 'r') as f:
            data = json.load(f)
        
        md_content = f"# Vault Dynamic Secrets Performance Report\n\n"
        md_content += f"**Test Date:** {data['test_date']}\n\n"
        md_content += "## Summary\n\n"
        md_content += "| Scenario | Static Avg (s) | Vault Avg (s) | Overhead (s) | Overhead (%) |\n"
        md_content += "|----------|----------------|---------------|--------------|---------------|\n"
        
        for scenario, results in data['scenarios'].items():
            successful_static = [r['static_app']['response_time'] for r in results['results'] if r['static_app']['success']]
            successful_vault = [r['vault_app']['response_time'] for r in results['results'] if r['vault_app']['success']]
            
            if successful_static and successful_vault:
                static_avg = statistics.mean(successful_static)
                vault_avg = statistics.mean(successful_vault)
                overhead = vault_avg - static_avg
                overhead_pct = (overhead / static_avg) * 100
                
                md_content += f"| {scenario.replace('_', ' ').title()} | {static_avg:.4f} | {vault_avg:.4f} | {overhead:.4f} | {overhead_pct:.2f}% |\n"
        
        md_content += "\n## Key Insights\n\n"
        md_content += "- **Static Secrets**: Baseline performance with hardcoded credentials\n"
        md_content += "- **Vault Dynamic Secrets**: Additional security with measured performance cost\n"
        md_content += "- **Trade-off**: Enhanced security vs Performance overhead\n"
        
        with open('performance_summary.md', 'w') as f:
            f.write(md_content)
        
        print("Summary report generated!")
        PYTHON

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          performance_report.json
          performance_summary.md
          vault-init-keys.txt
        retention-days: 30

    - name: Display Results
      run: |
        echo "=== Performance Summary ==="
        cat performance_summary.md