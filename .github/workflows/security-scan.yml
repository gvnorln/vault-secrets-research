name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  secrets-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks on Static Secrets App
        run: |
          echo "=== Scanning Static Secrets App ==="
          gitleaks detect \
            --source=test-apps/static-secrets-app \
            --report-format json \
            --report-path static-secrets-gitleaks-report.json \
            --verbose || true

      - name: Run Gitleaks on Vault Secrets App
        run: |
          echo "=== Scanning Vault Secrets App ==="
          gitleaks detect \
            --source=test-apps/vault-secrets-app \
            --report-format json \
            --report-path vault-secrets-gitleaks-report.json \
            --verbose || true

      - name: Upload Gitleaks Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-reports-${{ github.sha }}
          path: |
            static-secrets-gitleaks-report.json
            vault-secrets-gitleaks-report.json

      - name: Verify Vault Secrets App Gitleaks Report
        run: |
          echo "=== Verifying Vault Secrets App ==="
          if [ "$(jq '. | length' vault-secrets-gitleaks-report.json)" -eq 0 ]; then
            echo "✅ Vault Secrets App is clean, no secrets leaked."
          else
            echo "❌ Vault Secrets App contains leaked secrets!"
            cat vault-secrets-gitleaks-report.json
            exit 1
          fi

  container-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Images for Scanning
        run: |
          docker build -t static-secrets-app:scan test-apps/static-secrets-app/
          docker build -t vault-secrets-app:scan test-apps/vault-secrets-app/

      - name: Run Trivy Container Scan - Static App
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'static-secrets-app:scan'
          format: 'sarif'
          output: 'static-app-trivy-results.sarif'

      - name: Run Trivy Container Scan - Vault App
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vault-secrets-app:scan'
          format: 'sarif'
          output: 'vault-app-trivy-results.sarif'

      - name: Upload SARIF results - Static App
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: static-app-trivy-results.sarif
          category: trivy-static-app

      - name: Upload SARIF results - Vault App
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: vault-app-trivy-results.sarif
          category: trivy-vault-app

      - name: Upload Trivy Results as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-${{ github.sha }}
          path: '*.sarif'

  dependency-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Safety
        run: pip install safety

      - name: Scan Python Dependencies - Static App
        run: |
          echo "=== Scanning Static Secrets App Dependencies ==="
          cd test-apps/static-secrets-app
          pip install -r requirements.txt
          safety check --json --output ../../static-app-safety.json || true
          cd ../..

      - name: Scan Python Dependencies - Vault App
        run: |
          echo "=== Scanning Vault Secrets App Dependencies ==="
          cd test-apps/vault-secrets-app
          pip install -r requirements.txt
          safety check --json --output ../../vault-app-safety.json || true
          cd ../..

      - name: Upload Dependency Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-${{ github.sha }}
          path: '*-safety.json'
