name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday

permissions:
  contents: write  # Changed from 'read' to 'write' to allow pushing results
  security-events: write
  actions: read

jobs:
  secrets-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/

      - name: Create GitLeaks Config for Vault App
        run: |
          cat > .gitleaks-vault.toml << 'EOF'
          [extend]
          useDefault = true
          
          [allowlist]
          description = "Allowlist for vault app - ignore common vault placeholder patterns"
          
          [[allowlist.regexes]]
          description = "Ignore vault path references"
          regex = '''vault:\/\/.*'''
          
          [[allowlist.regexes]]
          description = "Ignore vault kv references"
          regex = '''kv\/.*'''
          
          [[allowlist.regexes]]
          description = "Ignore vault env vars"
          regex = '''VAULT_.*'''
          
          [[allowlist.regexes]]
          description = "Ignore vault config placeholders"
          regex = '''{{.*vault.*}}'''
          
          [[allowlist.paths]]
          description = "Ignore static secrets app directory completely for vault scan"
          path = '''test-apps/static-secrets-app/.*'''
          EOF

      - name: Run Gitleaks on Static Secrets App Only
        run: |
          echo "=== Scanning Static Secrets App Only ==="
          gitleaks detect \
            --source=test-apps/static-secrets-app \
            --report-format json \
            --report-path static-secrets-gitleaks-report.json \
            --no-git \
            --verbose || true
          
          # Check if report exists and has content
          if [ ! -f "static-secrets-gitleaks-report.json" ] || [ ! -s "static-secrets-gitleaks-report.json" ]; then
            echo "[]" > static-secrets-gitleaks-report.json
          fi

      - name: Run Gitleaks on Vault Secrets App Only
        run: |
          echo "=== Scanning Vault Secrets App Only ==="
          gitleaks detect \
            --source=test-apps/vault-secrets-app \
            --config-path=.gitleaks-vault.toml \
            --report-format json \
            --report-path vault-secrets-gitleaks-report.json \
            --no-git \
            --verbose || true
          
          # Check if report exists and has content
          if [ ! -f "vault-secrets-gitleaks-report.json" ] || [ ! -s "vault-secrets-gitleaks-report.json" ]; then
            echo "[]" > vault-secrets-gitleaks-report.json
          fi

      - name: Validate Scan Results
        run: |
          echo "=== Static Secrets Scan Results ==="
          if [ -f "static-secrets-gitleaks-report.json" ]; then
            echo "Static secrets found: $(jq length static-secrets-gitleaks-report.json)"
            jq -r '.[] | "- \(.Description) in \(.File)"' static-secrets-gitleaks-report.json || echo "No secrets found in static app"
          fi
          
          echo ""
          echo "=== Vault Secrets Scan Results ==="
          if [ -f "vault-secrets-gitleaks-report.json" ]; then
            echo "Vault secrets found: $(jq length vault-secrets-gitleaks-report.json)"
            jq -r '.[] | "- \(.Description) in \(.File)"' vault-secrets-gitleaks-report.json || echo "No secrets found in vault app"
          fi

      - name: Create Results Directory
        run: |
          mkdir -p security-reports
          mv static-secrets-gitleaks-report.json security-reports/
          mv vault-secrets-gitleaks-report.json security-reports/

      - name: Commit and Push Results to Repository
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add timestamp to avoid conflicts
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          # Rename files with timestamp
          mv security-reports/static-secrets-gitleaks-report.json security-reports/static-secrets-gitleaks-report_${TIMESTAMP}.json
          mv security-reports/vault-secrets-gitleaks-report.json security-reports/vault-secrets-gitleaks-report_${TIMESTAMP}.json
          
          # Add and commit files
          git add security-reports/
          git commit -m "Security scan results - ${TIMESTAMP}" || echo "No changes to commit"
          git push || echo "Failed to push changes"

      - name: Upload Gitleaks Reports as Artifacts (Backup)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-reports-${{ github.sha }}
          path: security-reports/*.json

  container-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Images for Scanning
        run: |
          echo "=== Building Static Secrets App ==="
          docker build -t static-secrets-app:scan test-apps/static-secrets-app/
          
          echo "=== Building Vault Secrets App ==="
          docker build -t vault-secrets-app:scan test-apps/vault-secrets-app/

      - name: Run Trivy Container Scan - Static App
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'static-secrets-app:scan'
          format: 'sarif'
          output: 'static-app-trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Run Trivy Container Scan - Vault App
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vault-secrets-app:scan'
          format: 'sarif'
          output: 'vault-app-trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload SARIF results - Static App
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: static-app-trivy-results.sarif
          category: trivy-static-app

      - name: Upload SARIF results - Vault App
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: vault-app-trivy-results.sarif
          category: trivy-vault-app

      - name: Upload Trivy Results as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-${{ github.sha }}
          path: '*.sarif'

  dependency-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Safety
        run: pip install safety

      - name: Scan Python Dependencies - Static App
        run: |
          echo "=== Scanning Static Secrets App Dependencies ==="
          cd test-apps/static-secrets-app
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
            safety check --json --output ../../static-app-safety.json || true
          else
            echo "[]" > ../../static-app-safety.json
          fi
          cd ../..

      - name: Scan Python Dependencies - Vault App
        run: |
          echo "=== Scanning Vault Secrets App Dependencies ==="
          cd test-apps/vault-secrets-app
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
            safety check --json --output ../../vault-app-safety.json || true
          else
            echo "[]" > ../../vault-app-safety.json
          fi
          cd ../..

      - name: Validate Dependency Scan Results
        run: |
          echo "=== Dependency Scan Summary ==="
          for file in static-app-safety.json vault-app-safety.json; do
            if [ -f "$file" ]; then
              echo "File: $file"
              echo "Issues found: $(jq length $file 2>/dev/null || echo "0")"
            fi
          done

      - name: Upload Dependency Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-${{ github.sha }}
          path: '*-safety.json'